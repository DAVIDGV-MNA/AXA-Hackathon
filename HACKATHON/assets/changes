<script>
// ----- helpers -----
function humanSize(bytes){
  if (typeof bytes !== 'number') return bytes || '';
  const u = ['B','KB','MB','GB']; let i = 0; let n = bytes;
  while (n >= 1024 && i < u.length-1) { n/=1024; i++; }
  return i <= 1 ? `${n.toFixed(0)} ${u[i]}` : `${n.toFixed(1)} ${u[i]}`;
}
function typeFromMime(m){
  if (!m) return '';
  m = m.toLowerCase();
  if (m.includes('pdf')) return 'pdf';
  if (m.includes('wordprocessingml')) return 'docx';
  if (m.includes('msword')) return 'doc';
  if (m.includes('text')) return 'txt';
  return '';
}
function extFromName(name){
  const m = (name||'').toLowerCase().match(/\.(pdf|docx|doc|txt)$/);
  return m ? m[1] : '';
}

// ----- state -----
let DOCS = [];

// ----- fetch & map to UI shape -----
async function fetchDocs(){
  const res = await fetch('/uploads/index.json', { cache:'no-store' });
  const raw = await res.json();
  const arr = Array.isArray(raw) ? raw : (raw.documents || []);
  DOCS = arr.map(it => {
    const t = typeFromMime(it.mimetype) || extFromName(it.storedName || it.originalName);
    return {
      id: it.id || crypto.randomUUID?.() || String(Math.random()),
      name: (it.originalName || it.storedName || '').replace(/\.(pdf|docx|doc|txt)$/i,''),
      filename: it.storedName || it.originalName,
      category: (it.category || 'other').toLowerCase(),
      date: it.uploadedAt || it.date || '',
      size: typeof it.size === 'number' ? humanSize(it.size) : (it.size || ''),
      type: t,
      url: it.url || `/uploads/${it.storedName || it.originalName}`
    };
  });
}

// ----- chips show correct counts -----
function updateChipCounts(){
  const countAll = DOCS.length;
  const count = c => DOCS.filter(d => d.category === c).length;
  const labels = {
    all: `All (${countAll})`,
    politics: `Politics (${count('politics')})`,
    operations: `Operations (${count('operations')})`,
    manual: `Manual (${count('manual')})`
  };
  Object.entries(labels).forEach(([cat,label])=>{
    const el = document.querySelector(`#docChips .chip[data-cat="${cat}"]`);
    if (el) el.textContent = label;
  });
}

// ----- render & filter -----
function renderDocs(list){
  const host = document.getElementById('docList');
  if (!host) return;
  host.innerHTML = list.map(d => {
    const dateStr = d.date ? new Date(d.date).toLocaleDateString() : '';
    const catLabel = d.category ? (d.category[0].toUpperCase()+d.category.slice(1)) : 'Other';
    return `
      <div class="document-card" data-id="${d.id}" data-cat="${d.category}" data-type="${d.type}">
        <div class="doc-left">
          <div class="doc-icon"><i data-lucide="file-text" class="icon"></i></div>
          <div>
            <div style="font-weight:600;">${d.name}</div>
            <div style="font-size:12px; color:var(--muted);">${d.filename || ''}</div>
            <div class="doc-meta">
              <div><i data-lucide="calendar" class="icon"></i>&nbsp;${dateStr}</div>
              <div><i data-lucide="hard-drive" class="icon"></i>&nbsp;${d.size}</div>
            </div>
          </div>
        </div>
        <div>
          <span class="doc-chip">${catLabel}</span>
          ${d.url ? `<a href="${d.url}" target="_blank" style="margin-left:8px;font-size:12px;">Open</a>` : ''}
        </div>
      </div>
    `;
  }).join('');
  if (window.lucide) lucide.createIcons();
}

function applyDocFilters(){
  const q = (document.getElementById('docSearch')?.value || '').toLowerCase();
  const activeChip = document.querySelector('#docChips .chip.active');
  const cat = activeChip ? activeChip.dataset.cat : 'all';
  const type = (document.getElementById('docTypeSelect')?.value || 'all');

  let filtered = DOCS.filter(d => {
    const textHit = (d.name+d.filename).toLowerCase().includes(q);
    const catHit = (cat==='all') || (d.category===cat);
    const typeHit = (type==='all') || (d.type===type);
    return textHit && catHit && typeHit;
  });

  const sort = (document.getElementById('docSortSelect')?.value || 'date');
  if (sort === 'date') filtered.sort((a,b)=> new Date(b.date||0) - new Date(a.date||0));
  else filtered.sort((a,b)=> (a.name||'').localeCompare(b.name||''));

  renderDocs(filtered);
}

// ----- init -----
async function initDocuments(){
  await fetchDocs();
  updateChipCounts();
  applyDocFilters();
}

// If your nav switches views, call initDocuments() when Documents first appears:
let docsInitialized = false;
function ensureDocsInit(){
  if (!docsInitialized){ docsInitialized = true; initDocuments(); }
}
document.querySelector('[data-view="documents"]')?.addEventListener('click', ensureDocsInit);
// If the Library is visible on page load, just do: initDocuments();
</script>