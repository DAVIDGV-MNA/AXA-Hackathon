const express = require('express');
const app = express();

// MUST be before routes
app.use(express.json({ limit: '2mb' }));
app.use(express.urlencoded({ extended: true }));

// (optional) tiny logger to see what arrives
app.use((req,res,next)=>{
  if (req.url.startsWith('/securegpt/embeddings')) {
    console.log('[embeddings] content-type:', req.headers['content-type']);
    console.log('[embeddings] typeof req.body:', typeof req.body);
    console.log('[embeddings] req.body preview:', typeof req.body === 'string' ? req.body.slice(0,120) : req.body);
  }
  next();
});

app.post('/securegpt/embeddings', async (req, res) => {
  try {
    // tolerate either parsed object or raw JSON string
    let payload = req.body;
    if (!payload || typeof payload !== 'object') {
      try { payload = JSON.parse(req.body); } catch { payload = {}; }
    }
    const { api_version, model_url, input } = payload || {};

    if (!model_url) return res.status(400).json({ error: 'model_url missing in body' });
    if (!Array.isArray(input) || input.length === 0) {
      return res.status(400).json({ error: 'input must be a non-empty array' });
    }

    const accessToken = await getAccessToken(); // your existing function

    const url = new URL(model_url);
    if (api_version) url.searchParams.set('api-version', api_version);

    const upstream = await fetch(url.toString(), {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ input })
    });

    const text = await upstream.text();
    res.status(upstream.status).type('application/json').send(text);
  } catch (e) {
    console.error('[/securegpt/embeddings] ERROR:', e);
    res.status(500).json({ error: String(e?.message || e) });
  }
});