// ----- Core: Chat call through your proxy -----
async function callSecureGPTChat(messages) {
  const payload = {
    api_version: AXA_SECURE_GPT_CONFIG.API_VERSION || "",
    model_url: AXA_SECURE_GPT_CONFIG.MODEL_URL || "",
    messages
  };

  console.log("[SecureGPT][chat] -> /securegpt/chat payload:", payload);

  let res, text;
  try {
    res = await fetch(SECUREGPT_PROXY_CHAT, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload)
    });
    text = await res.text();
  } catch (err) {
    console.error("[SecureGPT][chat] network error:", err);
    throw new Error("Network error calling /securegpt/chat");
  }

  let data;
  try { data = JSON.parse(text); } catch { data = { raw: text }; }

  if (!res.ok) {
    const msg = data?.error || data?.message || text || `HTTP ${res.status}`;
    throw new Error(`SecureGPT chat error: ${msg}`);
  }

  return data?.choices?.[0]?.message?.content ?? "";
}



sendEl.addEventListener('click', async () => {
  const text = inputEl.value.trim();
  if (!text) return;

  // push user message
  chatHistory.push({ role: 'user', content: text });
  renderChat();

  try {
    const msgs = chatHistory.map(m => ({ role: m.role, content: m.content }));
    let reply;

    if (getCurrentMode() === 'retrieve') {
      reply = await callRAGQuery(text, msgs);      // <- await OK
    } else {
      reply = await callSecureGPTChat(msgs);       // <- await OK
    }

    chatHistory.push({ role: 'assistant', content: reply || '(empty reply)' });
  } catch (err) {
    chatHistory.push({ role: 'assistant', content: String(err?.message || err) });
  } finally {
    inputEl.value = "";
    renderChat();
  }
});
