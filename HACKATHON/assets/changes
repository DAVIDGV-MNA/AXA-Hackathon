// server.cjs  (CommonJS)
// Run: node server.cjs

const express = require("express");
const cors = require("cors");

// ---- ENV (set in PowerShell before running, see below) ----
const {
  SECUREGPT_CLIENT_ID,
  SECUREGPT_CLIENT_SECRET,
  SECUREGPT_URL_TOKEN,            // OAuth2 token endpoint
  SECUREGPT_API_VERSION,          // e.g., "2024-10-21"
  SECUREGPT_MODEL_URL,            // e.g., https://host/v1/chat/completions
  AXA_SECUREGPT_EMBEDDINGS_MODEL, // e.g., "axa-embed-001"
  SECUREGPT_URL_EMBEDDINGS,       // e.g., https://host/v1/embeddings
  SECUREGPT_URL_VERSION           // e.g., "v1"
} = process.env;

const app = express();
app.use(cors());
app.use(express.json());

// ---------- Token cache ----------
let cachedToken = null;
let tokenExpiry = 0;

async function getAccessToken() {
  const now = Math.floor(Date.now() / 1000);
  if (cachedToken && now < tokenExpiry - 60) return cachedToken;

  const params = new URLSearchParams({
    grant_type: "client_credentials",
    client_id: SECUREGPT_CLIENT_ID,
    client_secret: SECUREGPT_CLIENT_SECRET
    // If your IdP needs scope or audience, add them here:
    // scope: "securegpt.read",
    // audience: "https://securegpt.example.com"
  });

  const resp = await fetch(SECUREGPT_URL_TOKEN, {
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    body: params
  });

  if (!resp.ok) {
    const t = await resp.text();
    throw new Error(`Token error ${resp.status}: ${t}`);
  }
  const data = await resp.json();
  cachedToken = data.access_token;
  tokenExpiry = data.expires_in ? now + data.expires_in : now + 300;
  return cachedToken;
}

function buildUrl(base, { apiVersion, urlVersion }) {
  const u = new URL(base);
  if (apiVersion) u.searchParams.set("api-version", apiVersion);
  if (urlVersion) u.searchParams.set("url-version", urlVersion); // only if your API wants it
  return u.toString();
}

// ---------- Routes ----------
app.post("/securegpt/token", async (_req, res) => {
  try {
    const token = await getAccessToken();
    res.json({ access_token: token, expires_in: Math.max(0, tokenExpiry - Math.floor(Date.now() / 1000)) });
  } catch (e) {
    console.error("[/securegpt/token] ERROR:", e);
    res.status(500).json({ error: String(e) });
  }
});

app.post("/securegpt/chat", async (req, res) => {
  try {
    console.log("[/securegpt/chat] inbound body:", JSON.stringify(req.body));
    const token = await getAccessToken();
    console.log("[/securegpt/chat] token acquired");

    const { api_version, url_version, model_url, messages, model } = req.body;

    const chatUrl = buildUrl(model_url || SECUREGPT_MODEL_URL, {
      apiVersion: api_version || SECUREGPT_API_VERSION,
      urlVersion: url_version || SECUREGPT_URL_VERSION
    });

    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`
    };

    const outboundBody = {
      // If your gateway requires explicit model, pass it (from body or env):
      ...(model ? { model } : {}),
      messages
    };

    console.log("[/securegpt/chat] ->", chatUrl, "body:", outboundBody);

    const upstream = await fetch(chatUrl, {
      method: "POST",
      headers,
      body: JSON.stringify(outboundBody)
    });

    const raw = await upstream.text();
    console.log("[/securegpt/chat] <- status:", upstream.status, "raw:", raw);

    res.status(upstream.status)
       .type(upstream.headers.get("content-type") || "application/json")
       .send(raw);
  } catch (e) {
    console.error("[/securegpt/chat] ERROR:", e);
    res.status(500).json({ error: String(e) });
  }
});

app.post("/securegpt/embeddings", async (req, res) => {
  try {
    const token = await getAccessToken();
    const { api_version, url_version, embeddings_url, model, input } = req.body;

    const embUrl = buildUrl(embeddings_url || SECUREGPT_URL_EMBEDDINGS, {
      apiVersion: api_version || SECUREGPT_API_VERSION,
      urlVersion: url_version || SECUREGPT_URL_VERSION
    });

    const headers = {
      "Content-Type": "application/json",
      "Authorization": `Bearer ${token}`
    };

    const outboundBody = {
      model: model || AXA_SECUREGPT_EMBEDDINGS_MODEL,
      input
    };

    const upstream = await fetch(embUrl, {
      method: "POST",
      headers,
      body: JSON.stringify(outboundBody)
    });

    const raw = await upstream.text();
    console.log("[/securegpt/embeddings] <- status:", upstream.status, "raw:", raw);

    res.status(upstream.status)
       .type(upstream.headers.get("content-type") || "application/json")
       .send(raw);
  } catch (e) {
    console.error("[/securegpt/embeddings] ERROR:", e);
    res.status(500).json({ error: String(e) });
  }
});

// ---------- Start ----------
const PORT = process.env.PORT || 3001;
app.listen(PORT, "0.0.0.0", () => {
  console.log(`SecureGPT proxy running on http://localhost:${PORT}`);
});
