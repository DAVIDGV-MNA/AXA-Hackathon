app.post('/securegpt/chat', async (req, res) => {
  try {
    // Sanity: confirm JSON body arrived
    if (!req.body || typeof req.body !== 'object') {
      return res.status(400).json({ error: 'Expected application/json body' });
    }

    console.log('[securegpt/chat] inbound body:', JSON.stringify(req.body));

    const token = await getAccessToken();
    console.log('[securegpt/chat] token acquired');

    // Safe destructuring with fallback {}
    const {
      api_version,
      url_version,
      model_url,
      messages,
      model
    } = req.body;

    if (!api_version || !model_url || !Array.isArray(messages)) {
      return res.status(400).json({
        error: 'Missing required fields: api_version, model_url, messages[]'
      });
    }

    // Build target URL and headers
    const chatUrl = model_url; // if you have a buildUrl(), you can wrap here
    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };

    const outboundBody = {
      ...(model ? { model } : {}),
      messages
    };

    const r = await fetch(chatUrl, {
      method: 'POST',
      headers,
      body: JSON.stringify(outboundBody)
    });

    const raw = await r.text();
    console.log('[securegpt/chat] <- upstream status:', r.status);

    // Pass-through status & body
    res.status(r.status).type('application/json').send(raw);
  } catch (e) {
    console.error('/securegpt/chat ERROR:', e);
    res.status(500).json({ error: String(e?.message || e) });
  }
});
