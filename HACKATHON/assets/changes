<div id="docChips" style="display:flex; gap:8px; margin-bottom:16px;">
  <button class="chip active" data-cat="all">All</button>
  <button class="chip" data-cat="politics">Politics</button>
  <button class="chip" data-cat="operations">Operations</button>
  <button class="chip" data-cat="manual">Manual</button>
</div>

<script>
async function fetchJSON(url){
  try {
    const r = await fetch(url, { cache: 'no-store' });
    if (!r.ok) throw new Error(`HTTP ${r.status}`);
    return await r.json();
  } catch (e) {
    console.warn('fetch failed:', url, e);
    return null;
  }
}

async function fetchDocs(){
  // Try absolute, then relative paths (depends on where you serve HTML from)
  const candidates = [
    '/uploads/index.json',
    './uploads/index.json',
    '../uploads/index.json'
  ];
  let raw = null;
  for (const u of candidates){
    raw = await fetchJSON(u);
    if (raw) break;
  }

  const arr = Array.isArray(raw) ? raw : (raw?.documents || []);
  DOCS = (arr || []).map(it => {
    const mime = (it.mimetype || '').toLowerCase();
    const extMatch = (it.storedName || it.originalName || '').toLowerCase().match(/\.(pdf|docx|doc|txt)$/);
    const type =
      mime.includes('pdf') ? 'pdf' :
      mime.includes('wordprocessingml') ? 'docx' :
      mime.includes('msword') ? 'doc' :
      mime.includes('text') ? 'txt' :
      (extMatch ? extMatch[1] : '');

    return {
      id: it.id || (crypto.randomUUID?.() || String(Math.random())),
      name: (it.originalName || it.storedName || '').replace(/\.(pdf|docx|doc|txt)$/i,''),
      filename: it.storedName || it.originalName || '',
      category: (it.category || 'other').toLowerCase(),
      date: it.uploadedAt || it.date || '',
      size: typeof it.size === 'number' ? humanSize(it.size) : (it.size || ''),
      type,
      url: it.url || `/uploads/${it.storedName || it.originalName || ''}`
    };
  });
}
</script>

<script>
async function initDocuments(){
  await fetchDocs();        // If it fails, DOCS = []
  updateChipCounts();       // Will set All (0), Politics (0), â€¦
  applyDocFilters();        // Renders empty list with no errors
}

// Initialize when you open the Documents view
let docsInitialized = false;
function ensureDocsInit(){
  if (!docsInitialized){ docsInitialized = true; initDocuments(); }
}
document.querySelector('[data-view="documents"]')?.addEventListener('click', ensureDocsInit);

// Optional: prefetch on page load so chips are correct the first time you switch
document.addEventListener('DOMContentLoaded', ()=> {
  fetchDocs().then(()=> { updateChipCounts(); }); // no render until user opens the view
});
</script>